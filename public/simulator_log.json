{
  "clients": {
    "aleth:nightly": {
      "branch": "master",
      "commit": "40566e5ed9749a4e7eefe0c2c3f1896223ecf29e",
      "name": "aleth",
      "repo": "git@github.com:ethereum/aleth.git",
      "system_name": "linux",
      "system_processor": "x86_64",
      "version": "1.5.0.dev1-12+commit.40566e5e.dirty"
    },
    "ethereumj:master": {
      "branch": "master",
      "commit": "2f1976cad2adc5ba770c9c26d5726066692b102a",
      "repo": "https://github.com/ether-camp/ethereum-harmony.git"
    },
    "go-ethereum:master": {
      "branch": "master",
      "commit": "580145e96db848cb8e2f8bb8f0621bcacbc9521c",
      "repo": "https://github.com/ethereum/go-ethereum"
    },
    "parity:master": {
      "branch": "master",
      "commit": "6888a968f9ef4826366b0cf775df3ffa3a6aa7fe",
      "repo": "https://github.com/paritytech/parity"
    }
  },
  "validations": {
    "aleth:nightly": {},
    "ethereumj:master": {},
    "go-ethereum:master": {},
    "parity:master": {}
  },
  "simulations": {
    "aleth:nightly": {
      "ethereum/rpc-compat": {
        "start": "2018-09-06T15:36:48.234754881Z",
        "end": "2018-09-06T15:37:59.860184787Z",
        "success": false,
        "subresults": [
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. uncle count should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. response should be null.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. response should not be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. transactions should be hashes.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. transactions should be objects.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. transactions should be hashes.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. transactions should be objects.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\") rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). block number should be zero.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. block number should be 32.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0 rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. response has hash.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0 rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. response has hash.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". response is not empty.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result != null",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "METHOD_NOT_FOUND: The method being requested is not available on this server",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result != null",
              "expectedResponse": {
                "result": "0xce909e8ea6851bc36c007a0072d0524b07a3ff8d4e623aca4c71ca8e57250c4d0a3fc38fa8fbaaa81ead4b9f6bd03356b6f8bf18bccad167d78891636e1d69561b"
              },
              "requestObject": {
                "params": [
                  "0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb",
                  "0x68656c6c6f20776f726c64"
                ],
                "method": "eth_sign"
              }
            }
          },
          {
            "name": "eth_sign message \"hello world\". signed message should be length 132.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result | length == 132",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "METHOD_NOT_FOUND: The method being requested is not available on this server",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result | length == 132",
              "expectedResponse": {
                "result": "0xce909e8ea6851bc36c007a0072d0524b07a3ff8d4e623aca4c71ca8e57250c4d0a3fc38fa8fbaaa81ead4b9f6bd03356b6f8bf18bccad167d78891636e1d69561b"
              },
              "requestObject": {
                "params": [
                  "0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb",
                  "0x68656c6c6f20776f726c64"
                ],
                "method": "eth_sign"
              }
            }
          },
          {
            "name": "eth_sign message \"hello world\". signatures should be equal.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result == .expectedResponse.result",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "METHOD_NOT_FOUND: The method being requested is not available on this server",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result == .expectedResponse.result",
              "expectedResponse": {
                "result": "0xce909e8ea6851bc36c007a0072d0524b07a3ff8d4e623aca4c71ca8e57250c4d0a3fc38fa8fbaaa81ead4b9f6bd03356b6f8bf18bccad167d78891636e1d69561b"
              },
              "requestObject": {
                "params": [
                  "0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb",
                  "0x68656c6c6f20776f726c64"
                ],
                "method": "eth_sign"
              }
            }
          },
          {
            "name": "eth_sign with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. error code should be -32602.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.code == .expectedResponse.error.code",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "METHOD_NOT_FOUND: The method being requested is not available on this server",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.error.code == .expectedResponse.error.code",
              "expectedResponse": {
                "error": {
                  "message": "missing value for required argument 0",
                  "code": -32602
                }
              },
              "requestObject": {
                "shouldFailSchema": true,
                "params": [],
                "method": "eth_sign"
              }
            }
          },
          {
            "name": "eth_sign with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. error code should be -32602.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.code == .expectedResponse.error.code",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "METHOD_NOT_FOUND: The method being requested is not available on this server",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.error.code == .expectedResponse.error.code",
              "expectedResponse": {
                "error": {
                  "message": "missing value for required argument 1",
                  "code": -32602
                }
              },
              "requestObject": {
                "shouldFailSchema": true,
                "params": [
                  "0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb"
                ],
                "method": "eth_sign"
              }
            }
          },
          {
            "name": "eth_getTransactionByHash get tx hash rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0x1",
                  "hash": "0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81",
                  "blockHash": "0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942",
                  "gas": "0x4cb2f",
                  "value": "0xa",
                  "blockNumber": "0x2",
                  "to": "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "input": "0x12a7b914",
                  "from": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                  "transactionIndex": "0x0",
                  "gasPrice": "0x1"
                }
              },
              "schemaException": "{u'nonce': u'0x1', u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81', u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', u'gas': u'0x4cb2f', u'value': u'0xa', u'blockNumber': u'0x2', u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f', u'input': u'0x12a7b914', u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', u'transactionIndex': u'0x0', u'gasPrice': u'0x1'} is not valid under any of the given schemas\n\nFailed validating u'oneOf' in schema[u'allOf'][1][u'properties'][u'result']:\n    {u'description': u'Object - A transaction object, or null when no transaction was found.',\n     u'oneOf': [{u'properties': {u'blockHash': {u'description': u'DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending.',\n                                                u'type': u'string'},\n                                 u'blockNumber': {u'description': u'QUANTITY - block number where this transaction was in. null when its pending.',\n                                                  u'type': u'string'},\n                                 u'from': {u'description': u'DATA, 20 Bytes - address of the sender.',\n                                           u'type': u'string'},\n                                 u'gas': {u'description': u'QUANTITY - gas provided by the sender.',\n                                          u'type': u'string'},\n                                 u'gasPrice': {u'description': u'QUANTITY - gas price provided by the sender in Wei.',\n                                               u'type': u'string'},\n                                 u'hash': {u'description': u'DATA, 32 Bytes - hash of the transaction.',\n                                           u'type': u'string'},\n                                 u'input': {u'description': u'DATA - the data send along with the transaction.',\n                                            u'type': u'string'},\n                                 u'nonce': {u'description': u'nonce: QUANTITY - the number of transactions made by the sender prior to this one.',\n                                            u'type': u'string'},\n                                 u'r': {u'type': u'string'},\n                                 u's': {u'type': u'string'},\n                                 u'to': {u'description': u'DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.',\n                                         u'type': u'string'},\n                                 u'transactionIndex': {u'description': u'QUANTITY - integer of the transactions index position in the block. null when its pending.',\n                                                       u'type': u'string'},\n                                 u'v': {u'type': u'string'},\n                                 u'value': {u'description': u'QUANTITY - value transferred in Wei.',\n                                            u'type': u'string'}},\n                 u'required': [u'blockHash',\n                               u'blockNumber',\n                               u'from',\n                               u'gas',\n                               u'gasPrice',\n                               u'hash',\n                               u'input',\n                               u'nonce',\n                               u'r',\n                               u's',\n                               u'to',\n                               u'transactionIndex',\n                               u'v',\n                               u'value'],\n                 u'type': u'object'},\n                {u'type': u'null'}]}\n\nOn instance[u'result']:\n    {u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942',\n     u'blockNumber': u'0x2',\n     u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',\n     u'gas': u'0x4cb2f',\n     u'gasPrice': u'0x1',\n     u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81',\n     u'input': u'0x12a7b914',\n     u'nonce': u'0x1',\n     u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f',\n     u'transactionIndex': u'0x0',\n     u'value': u'0xa'}",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "oneOf": [
                          {
                            "required": [
                              "blockHash",
                              "blockNumber",
                              "from",
                              "gas",
                              "gasPrice",
                              "hash",
                              "input",
                              "nonce",
                              "r",
                              "s",
                              "to",
                              "transactionIndex",
                              "v",
                              "value"
                            ],
                            "type": "object",
                            "properties": {
                              "nonce": {
                                "type": "string",
                                "description": "nonce: QUANTITY - the number of transactions made by the sender prior to this one."
                              },
                              "hash": {
                                "type": "string",
                                "description": "DATA, 32 Bytes - hash of the transaction."
                              },
                              "blockHash": {
                                "type": "string",
                                "description": "DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending."
                              },
                              "v": {
                                "type": "string"
                              },
                              "gas": {
                                "type": "string",
                                "description": "QUANTITY - gas provided by the sender."
                              },
                              "value": {
                                "type": "string",
                                "description": "QUANTITY - value transferred in Wei."
                              },
                              "blockNumber": {
                                "type": "string",
                                "description": "QUANTITY - block number where this transaction was in. null when its pending."
                              },
                              "to": {
                                "type": "string",
                                "description": "DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction."
                              },
                              "s": {
                                "type": "string"
                              },
                              "r": {
                                "type": "string"
                              },
                              "input": {
                                "type": "string",
                                "description": "DATA - the data send along with the transaction."
                              },
                              "from": {
                                "type": "string",
                                "description": "DATA, 20 Bytes - address of the sender."
                              },
                              "transactionIndex": {
                                "type": "string",
                                "description": "QUANTITY - integer of the transactions index position in the block. null when its pending."
                              },
                              "gasPrice": {
                                "type": "string",
                                "description": "QUANTITY - gas price provided by the sender in Wei."
                              }
                            }
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "description": "Object - A transaction object, or null when no transaction was found."
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getTransactionByHash get tx hash. response has tx hash.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. tx hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. blockNumber should be 2.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx. response should be null.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. transaction count should be equal.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method. response is not empty.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result != null",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "INVALID_PARAMS: Invalid method parameters (invalid name and/or type) recognised",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.result != null",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt experimental method. key 0x00 should be first result in the array.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result.storage[0].key == .expectedResponse.result.storage[0].key",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "INVALID_PARAMS: Invalid method parameters (invalid name and/or type) recognised",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.result.storage[0].key == .expectedResponse.result.storage[0].key",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt experimental method. storage values at 0x00 should be equal.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result.storage[0].value == .expectedResponse.result.storage[0].value",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "INVALID_PARAMS: Invalid method parameters (invalid name and/or type) recognised",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.result.storage[0].value == .expectedResponse.result.storage[0].value",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should be an error.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should have error code -32000.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.code == .expectedResponse.error.code",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "INVALID_PARAMS: Invalid method parameters (invalid name and/or type) recognised",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.error.code == .expectedResponse.error.code",
              "expectedResponse": {
                "error": {
                  "message": "block 878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c not found",
                  "code": -32000
                }
              },
              "requestObject": {
                "params": [
                  "0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should have error message block not found.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.message == .expectedResponse.error.message",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "INVALID_PARAMS: Invalid method parameters (invalid name and/or type) recognised",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.error.message == .expectedResponse.error.message",
              "expectedResponse": {
                "error": {
                  "message": "block 878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c not found",
                  "code": -32000
                }
              },
              "requestObject": {
                "params": [
                  "0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. uncle count should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. response should be null.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. response should not be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. error code should be -32602.",
            "success": true
          }
        ]
      }
    },
    "ethereumj:master": {
      "ethereum/rpc-compat": {
        "start": "2018-09-06T15:37:59.860259881Z",
        "end": "2018-09-06T15:41:27.616243661Z",
        "success": false,
        "subresults": [
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. uncle count should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. response should be null.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. response should not be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0xf02576d9a03e7146",
                  "transactionsRoot": "0xf6f36662c7d5cd443067f551d9874f11a9dfc9c3cfd72388beb19e60b585938c",
                  "hash": "0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942",
                  "uncles": [],
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "gasLimit": "0x2fefd8",
                  "parentHash": "0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9",
                  "receiptsRoot": "0xe9111d31a5282e8d68d1beaf1821405a9716182e2b780a724e1e6b78c609c6f3",
                  "miner": "0x8888f1f195afa192cfee860698584c030f4c9db1",
                  "number": "0x2",
                  "stateRoot": "0x52cbd86e23f3cd03140f49302f32ace2583c5e046c91049eb10136266b932cac",
                  "transactions": [
                    "0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81"
                  ],
                  "difficulty": "0x20040",
                  "extraData": null,
                  "gasUsed": "0x53f0",
                  "timestamp": "0x561bc2e2",
                  "totalDifficulty": "0x60040",
                  "size": "0x268",
                  "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                }
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'extraData']:\n    {u'description': u'DATA - the \"extra data\" field of this block.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'extraData']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "transactions": {
                            "items": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "required": [
                                    "gasPrice",
                                    "v",
                                    "blockHash",
                                    "to",
                                    "nonce",
                                    "gas",
                                    "blockNumber",
                                    "value",
                                    "hash",
                                    "transactionIndex",
                                    "from",
                                    "input",
                                    "r",
                                    "s"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "nonce": {
                                      "type": "string"
                                    },
                                    "hash": {
                                      "type": "string"
                                    },
                                    "input": {
                                      "type": "string"
                                    },
                                    "blockHash": {
                                      "type": "string"
                                    },
                                    "gas": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "s": {
                                      "type": "string"
                                    },
                                    "r": {
                                      "type": "string"
                                    },
                                    "v": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "transactionIndex": {
                                      "type": "string"
                                    },
                                    "gasPrice": {
                                      "type": "string"
                                    }
                                  }
                                }
                              ]
                            },
                            "type": "array",
                            "description": "Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the total difficulty of the chain until this block."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getBlockByHash without full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. transactions should be hashes.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0xf02576d9a03e7146",
                  "transactionsRoot": "0xf6f36662c7d5cd443067f551d9874f11a9dfc9c3cfd72388beb19e60b585938c",
                  "hash": "0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942",
                  "uncles": [],
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "gasLimit": "0x2fefd8",
                  "parentHash": "0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9",
                  "receiptsRoot": "0xe9111d31a5282e8d68d1beaf1821405a9716182e2b780a724e1e6b78c609c6f3",
                  "miner": "0x8888f1f195afa192cfee860698584c030f4c9db1",
                  "number": "0x2",
                  "stateRoot": "0x52cbd86e23f3cd03140f49302f32ace2583c5e046c91049eb10136266b932cac",
                  "transactions": [
                    {
                      "nonce": "0x01",
                      "from": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                      "blockHash": "0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942",
                      "gas": "0x04cb2f",
                      "value": "0x0a",
                      "blockNumber": "0x2",
                      "to": "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                      "input": "0x12a7b914",
                      "hash": "0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81",
                      "transactionIndex": "0x0",
                      "gasPrice": "0x01"
                    }
                  ],
                  "difficulty": "0x20040",
                  "extraData": null,
                  "gasUsed": "0x53f0",
                  "timestamp": "0x561bc2e2",
                  "totalDifficulty": "0x60040",
                  "size": "0x268",
                  "logsBloom": "0x
                }
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'extraData']:\n    {u'description': u'DATA - the \"extra data\" field of this block.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'extraData']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "transactions": {
                            "items": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "required": [
                                    "gasPrice",
                                    "v",
                                    "blockHash",
                                    "to",
                                    "nonce",
                                    "gas",
                                    "blockNumber",
                                    "value",
                                    "hash",
                                    "transactionIndex",
                                    "from",
                                    "input",
                                    "r",
                                    "s"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "nonce": {
                                      "type": "string"
                                    },
                                    "hash": {
                                      "type": "string"
                                    },
                                    "input": {
                                      "type": "string"
                                    },
                                    "blockHash": {
                                      "type": "string"
                                    },
                                    "gas": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "s": {
                                      "type": "string"
                                    },
                                    "r": {
                                      "type": "string"
                                    },
                                    "v": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "transactionIndex": {
                                      "type": "string"
                                    },
                                    "gasPrice": {
                                      "type": "string"
                                    }
                                  }
                                }
                              ]
                            },
                            "type": "array",
                            "description": "Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the total difficulty of the chain until this block."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getBlockByHash with full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. transactions should be objects.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0xf02576d9a03e7146",
                  "transactionsRoot": "0xf6f36662c7d5cd443067f551d9874f11a9dfc9c3cfd72388beb19e60b585938c",
                  "hash": "0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942",
                  "uncles": [],
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "gasLimit": "0x2fefd8",
                  "parentHash": "0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9",
                  "receiptsRoot": "0xe9111d31a5282e8d68d1beaf1821405a9716182e2b780a724e1e6b78c609c6f3",
                  "miner": "0x8888f1f195afa192cfee860698584c030f4c9db1",
                  "number": "0x2",
                  "stateRoot": "0x52cbd86e23f3cd03140f49302f32ace2583c5e046c91049eb10136266b932cac",
                  "transactions": [
                    "0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81"
                  ],
                  "difficulty": "0x20040",
                  "extraData": null,
                  "gasUsed": "0x53f0",
                  "timestamp": "0x561bc2e2",
                  "totalDifficulty": "0x60040",
                  "size": "0x268",
                  "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
                }
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'extraData']:\n    {u'description': u'DATA - the \"extra data\" field of this block.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'extraData']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "transactions": {
                            "items": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "required": [
                                    "gasPrice",
                                    "v",
                                    "blockHash",
                                    "to",
                                    "nonce",
                                    "gas",
                                    "blockNumber",
                                    "value",
                                    "hash",
                                    "transactionIndex",
                                    "from",
                                    "input",
                                    "r",
                                    "s"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "nonce": {
                                      "type": "string"
                                    },
                                    "hash": {
                                      "type": "string"
                                    },
                                    "input": {
                                      "type": "string"
                                    },
                                    "blockHash": {
                                      "type": "string"
                                    },
                                    "gas": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "s": {
                                      "type": "string"
                                    },
                                    "r": {
                                      "type": "string"
                                    },
                                    "v": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "transactionIndex": {
                                      "type": "string"
                                    },
                                    "gasPrice": {
                                      "type": "string"
                                    }
                                  }
                                }
                              ]
                            },
                            "type": "array",
                            "description": "Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the total difficulty of the chain until this block."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getBlockByNumber without full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. transactions should be hashes.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0xf02576d9a03e7146",
                  "transactionsRoot": "0xf6f36662c7d5cd443067f551d9874f11a9dfc9c3cfd72388beb19e60b585938c",
                  "hash": "0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942",
                  "uncles": [],
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "gasLimit": "0x2fefd8",
                  "parentHash": "0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9",
                  "receiptsRoot": "0xe9111d31a5282e8d68d1beaf1821405a9716182e2b780a724e1e6b78c609c6f3",
                  "miner": "0x8888f1f195afa192cfee860698584c030f4c9db1",
                  "number": "0x2",
                  "stateRoot": "0x52cbd86e23f3cd03140f49302f32ace2583c5e046c91049eb10136266b932cac",
                  "transactions": [
                    {
                      "nonce": "0x01",
                      "from": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                      "blockHash": "0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942",
                      "gas": "0x04cb2f",
                      "value": "0x0a",
                      "blockNumber": "0x2",
                      "to": "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                      "input": "0x12a7b914",
                      "hash": "0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81",
                      "transactionIndex": "0x0",
                      "gasPrice": "0x01"
                    }
                  ],
                  "difficulty": "0x20040",
                  "extraData": null,
                  "gasUsed": "0x53f0",
                  "timestamp": "0x561bc2e2",
                  "totalDifficulty": "0x60040",
                  "size": "0x268",
                  "logsBloom": "0x
                }
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'extraData']:\n    {u'description': u'DATA - the \"extra data\" field of this block.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'extraData']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "transactions": {
                            "items": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "required": [
                                    "gasPrice",
                                    "v",
                                    "blockHash",
                                    "to",
                                    "nonce",
                                    "gas",
                                    "blockNumber",
                                    "value",
                                    "hash",
                                    "transactionIndex",
                                    "from",
                                    "input",
                                    "r",
                                    "s"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "nonce": {
                                      "type": "string"
                                    },
                                    "hash": {
                                      "type": "string"
                                    },
                                    "input": {
                                      "type": "string"
                                    },
                                    "blockHash": {
                                      "type": "string"
                                    },
                                    "gas": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "s": {
                                      "type": "string"
                                    },
                                    "r": {
                                      "type": "string"
                                    },
                                    "v": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "transactionIndex": {
                                      "type": "string"
                                    },
                                    "gasPrice": {
                                      "type": "string"
                                    }
                                  }
                                }
                              ]
                            },
                            "type": "array",
                            "description": "Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the total difficulty of the chain until this block."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getBlockByNumber with full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. transactions should be objects.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\") rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). block number should be zero.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0xdb063000b00e8026",
                  "transactionsRoot": "0x6075dd391cf791c74f9e01855d9e5061d009c0903dc102e8b00bcafde8f92839",
                  "hash": "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  "uncles": [],
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "gasLimit": "0x2fefd8",
                  "parentHash": "0x0f765087745aa259d9e5ac39c367c57432a16ed98e3b0d81c5b51d10f301dc49",
                  "receiptsRoot": "0xa50a7e67e833f4502524371ee462ccbcc6c6cabd2aeb1555c56150007a53183c",
                  "miner": "0x8888f1f195afa192cfee860698584c030f4c9db1",
                  "number": "0x20",
                  "stateRoot": "0xf65f3dd13f72f5fa5607a5224691419969b4f4bae7a00a6cdb853f2ca9eeb1be",
                  "transactions": [
                    "0xcef53f2311d7c80e9086d661e69ac11a5f3d081e28e02a9ba9b66749407ac310"
                  ],
                  "difficulty": "0x207c0",
                  "extraData": null,
                  "gasUsed": "0x5c99",
                  "timestamp": "0x561bc33d",
                  "totalDifficulty": "0x427c00",
                  "size": "0x268",
                  "logsBloom": "0x
                }
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'extraData']:\n    {u'description': u'DATA - the \"extra data\" field of this block.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'extraData']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "transactions": {
                            "items": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "required": [
                                    "gasPrice",
                                    "v",
                                    "blockHash",
                                    "to",
                                    "nonce",
                                    "gas",
                                    "blockNumber",
                                    "value",
                                    "hash",
                                    "transactionIndex",
                                    "from",
                                    "input",
                                    "r",
                                    "s"
                                  ],
                                  "type": "object",
                                  "properties": {
                                    "nonce": {
                                      "type": "string"
                                    },
                                    "hash": {
                                      "type": "string"
                                    },
                                    "input": {
                                      "type": "string"
                                    },
                                    "blockHash": {
                                      "type": "string"
                                    },
                                    "gas": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "s": {
                                      "type": "string"
                                    },
                                    "r": {
                                      "type": "string"
                                    },
                                    "v": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "transactionIndex": {
                                      "type": "string"
                                    },
                                    "gasPrice": {
                                      "type": "string"
                                    }
                                  }
                                }
                              ]
                            },
                            "type": "array",
                            "description": "Array - Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the total difficulty of the chain until this block."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getBlockByNumber get latest block. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. block number should be 32.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0 rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0x64050e6ee4c2f3c7",
                  "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                  "hash": "0x9fbaff6f69e4f47a09fb30a14baadf2435bd1ad1f1940e7e985de0b3acff4e0a",
                  "uncles": [],
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "gasLimit": "0x2fefd8",
                  "parentHash": "0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9",
                  "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                  "miner": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                  "number": "0x2",
                  "stateRoot": "0xee57559895449b8dbd0a096b2999cf97b517b645ec8db33c7f5934778672263e",
                  "transactions": [],
                  "difficulty": "0x20040",
                  "extraData": null,
                  "gasUsed": "0x0",
                  "timestamp": "0x561bc2e7",
                  "totalDifficulty": "0x0",
                  "size": "0x1ff",
                  "logsBloom": "0x
                }
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'extraData']:\n    {u'description': u'DATA - the \"extra data\" field of this block.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'extraData']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "null",
                            "description": "Uncles don't have total difficulty."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. response has hash.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0 rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0x64050e6ee4c2f3c7",
                  "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                  "hash": "0x9fbaff6f69e4f47a09fb30a14baadf2435bd1ad1f1940e7e985de0b3acff4e0a",
                  "uncles": [],
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "gasLimit": "0x2fefd8",
                  "parentHash": "0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9",
                  "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                  "miner": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                  "number": "0x2",
                  "stateRoot": "0xee57559895449b8dbd0a096b2999cf97b517b645ec8db33c7f5934778672263e",
                  "transactions": [],
                  "difficulty": "0x20040",
                  "extraData": null,
                  "gasUsed": "0x0",
                  "timestamp": "0x561bc2e7",
                  "totalDifficulty": "0x0",
                  "size": "0x1ff",
                  "logsBloom": "0x
                }
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'extraData']:\n    {u'description': u'DATA - the \"extra data\" field of this block.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'extraData']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "null",
                            "description": "Uncles don't have total difficulty."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. response has hash.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". signed message should be length 132.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". signatures should be equal.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "id": 1,
                "result": {
                  "nonce": "0x01",
                  "from": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                  "blockHash": "0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942",
                  "gas": "0x04cb2f",
                  "value": "0x0a",
                  "blockNumber": "0x2",
                  "to": "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "input": "0x12a7b914",
                  "hash": "0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81",
                  "transactionIndex": "0x0",
                  "gasPrice": "0x01"
                }
              },
              "schemaException": "{u'nonce': u'0x01', u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b', u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942', u'gas': u'0x04cb2f', u'value': u'0x0a', u'blockNumber': u'0x2', u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f', u'input': u'0x12a7b914', u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81', u'transactionIndex': u'0x0', u'gasPrice': u'0x01'} is not valid under any of the given schemas\n\nFailed validating u'oneOf' in schema[u'allOf'][1][u'properties'][u'result']:\n    {u'description': u'Object - A transaction object, or null when no transaction was found.',\n     u'oneOf': [{u'properties': {u'blockHash': {u'description': u'DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending.',\n                                                u'type': u'string'},\n                                 u'blockNumber': {u'description': u'QUANTITY - block number where this transaction was in. null when its pending.',\n                                                  u'type': u'string'},\n                                 u'from': {u'description': u'DATA, 20 Bytes - address of the sender.',\n                                           u'type': u'string'},\n                                 u'gas': {u'description': u'QUANTITY - gas provided by the sender.',\n                                          u'type': u'string'},\n                                 u'gasPrice': {u'description': u'QUANTITY - gas price provided by the sender in Wei.',\n                                               u'type': u'string'},\n                                 u'hash': {u'description': u'DATA, 32 Bytes - hash of the transaction.',\n                                           u'type': u'string'},\n                                 u'input': {u'description': u'DATA - the data send along with the transaction.',\n                                            u'type': u'string'},\n                                 u'nonce': {u'description': u'nonce: QUANTITY - the number of transactions made by the sender prior to this one.',\n                                            u'type': u'string'},\n                                 u'r': {u'type': u'string'},\n                                 u's': {u'type': u'string'},\n                                 u'to': {u'description': u'DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.',\n                                         u'type': u'string'},\n                                 u'transactionIndex': {u'description': u'QUANTITY - integer of the transactions index position in the block. null when its pending.',\n                                                       u'type': u'string'},\n                                 u'v': {u'type': u'string'},\n                                 u'value': {u'description': u'QUANTITY - value transferred in Wei.',\n                                            u'type': u'string'}},\n                 u'required': [u'blockHash',\n                               u'blockNumber',\n                               u'from',\n                               u'gas',\n                               u'gasPrice',\n                               u'hash',\n                               u'input',\n                               u'nonce',\n                               u'r',\n                               u's',\n                               u'to',\n                               u'transactionIndex',\n                               u'v',\n                               u'value'],\n                 u'type': u'object'},\n                {u'type': u'null'}]}\n\nOn instance[u'result']:\n    {u'blockHash': u'0x0e29f455b8db7b15042efe9eabe0beb0ce2c7901919bba1107b1352191e09942',\n     u'blockNumber': u'0x2',\n     u'from': u'0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b',\n     u'gas': u'0x04cb2f',\n     u'gasPrice': u'0x01',\n     u'hash': u'0xb1a62356d1433202cdef0ef9030f8abdfbb3aef549fab0867cf0eaee70b09d81',\n     u'input': u'0x12a7b914',\n     u'nonce': u'0x01',\n     u'to': u'0x6295ee1b4f6dd65047762f924ecd367c17eabf8f',\n     u'transactionIndex': u'0x0',\n     u'value': u'0x0a'}",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "oneOf": [
                          {
                            "required": [
                              "blockHash",
                              "blockNumber",
                              "from",
                              "gas",
                              "gasPrice",
                              "hash",
                              "input",
                              "nonce",
                              "r",
                              "s",
                              "to",
                              "transactionIndex",
                              "v",
                              "value"
                            ],
                            "type": "object",
                            "properties": {
                              "nonce": {
                                "type": "string",
                                "description": "nonce: QUANTITY - the number of transactions made by the sender prior to this one."
                              },
                              "hash": {
                                "type": "string",
                                "description": "DATA, 32 Bytes - hash of the transaction."
                              },
                              "blockHash": {
                                "type": "string",
                                "description": "DATA, 32 Bytes - hash of the block where this transaction was in. null when its pending."
                              },
                              "v": {
                                "type": "string"
                              },
                              "gas": {
                                "type": "string",
                                "description": "QUANTITY - gas provided by the sender."
                              },
                              "value": {
                                "type": "string",
                                "description": "QUANTITY - value transferred in Wei."
                              },
                              "blockNumber": {
                                "type": "string",
                                "description": "QUANTITY - block number where this transaction was in. null when its pending."
                              },
                              "to": {
                                "type": "string",
                                "description": "DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction."
                              },
                              "s": {
                                "type": "string"
                              },
                              "r": {
                                "type": "string"
                              },
                              "input": {
                                "type": "string",
                                "description": "DATA - the data send along with the transaction."
                              },
                              "from": {
                                "type": "string",
                                "description": "DATA, 20 Bytes - address of the sender."
                              },
                              "transactionIndex": {
                                "type": "string",
                                "description": "QUANTITY - integer of the transactions index position in the block. null when its pending."
                              },
                              "gasPrice": {
                                "type": "string",
                                "description": "QUANTITY - gas price provided by the sender in Wei."
                              }
                            }
                          },
                          {
                            "type": "null"
                          }
                        ],
                        "description": "Object - A transaction object, or null when no transaction was found."
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getTransactionByHash get tx hash. response has tx hash.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. tx hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. blockNumber should be 2.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx. response should be null.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. transaction count should be equal.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method. response is not empty.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result != null",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result != null",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt experimental method. key 0x00 should be first result in the array.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result.storage[0].key == .expectedResponse.result.storage[0].key",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result.storage[0].key == .expectedResponse.result.storage[0].key",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt experimental method. storage values at 0x00 should be equal.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result.storage[0].value == .expectedResponse.result.storage[0].value",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result.storage[0].value == .expectedResponse.result.storage[0].value",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should be an error.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should have error code -32000.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.code == .expectedResponse.error.code",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.error.code == .expectedResponse.error.code",
              "expectedResponse": {
                "error": {
                  "message": "block 878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c not found",
                  "code": -32000
                }
              },
              "requestObject": {
                "params": [
                  "0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should have error message block not found.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.message == .expectedResponse.error.message",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.error.message == .expectedResponse.error.message",
              "expectedResponse": {
                "error": {
                  "message": "block 878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c not found",
                  "code": -32000
                }
              },
              "requestObject": {
                "params": [
                  "0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. error code should be -32602.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.code == .expectedResponse.error.code",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.error.code == .expectedResponse.error.code",
              "expectedResponse": {
                "error": {
                  "message": "missing value for required argument 0",
                  "code": -32602
                }
              },
              "requestObject": {
                "shouldFailSchema": true,
                "params": [],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. uncle count should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. response should be null.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. response should not be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. error code should be -32602.",
            "success": true
          }
        ]
      }
    },
    "go-ethereum:master": {
      "ethereum/rpc-compat": {
        "start": "2018-09-06T15:41:27.617029779Z",
        "end": "2018-09-06T15:41:33.631966976Z",
        "success": false,
        "subresults": [
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. uncle count should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. response should be null.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. response should not be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. transactions should be hashes.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. transactions should be objects.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. transactions should be hashes.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. transactions should be objects.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\") rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). block number should be zero.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. block number should be 32.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0 rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. response has hash.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0 rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. response has hash.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". signed message should be length 132.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\". signatures should be equal.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. response has tx hash.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. tx hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. blockNumber should be 2.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx. response should be null.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. transaction count should be equal.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method. response is not empty.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result != null",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "invalid argument 4: json: cannot unmarshal string into Go value of type int",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.result != null",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt experimental method. key 0x00 should be first result in the array.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result.storage[0].key == .expectedResponse.result.storage[0].key",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "invalid argument 4: json: cannot unmarshal string into Go value of type int",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.result.storage[0].key == .expectedResponse.result.storage[0].key",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt experimental method. storage values at 0x00 should be equal.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result.storage[0].value == .expectedResponse.result.storage[0].value",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "invalid argument 4: json: cannot unmarshal string into Go value of type int",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.result.storage[0].value == .expectedResponse.result.storage[0].value",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should be an error.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should have error code -32000.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.code == .expectedResponse.error.code",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "invalid argument 4: json: cannot unmarshal string into Go value of type int",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.error.code == .expectedResponse.error.code",
              "expectedResponse": {
                "error": {
                  "message": "block 878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c not found",
                  "code": -32000
                }
              },
              "requestObject": {
                "params": [
                  "0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should have error message block not found.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.message == .expectedResponse.error.message",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "invalid argument 4: json: cannot unmarshal string into Go value of type int",
                  "code": -32602
                }
              },
              "assertion_program": ".receivedResponse.error.message == .expectedResponse.error.message",
              "expectedResponse": {
                "error": {
                  "message": "block 878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c not found",
                  "code": -32000
                }
              },
              "requestObject": {
                "params": [
                  "0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. uncle count should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. response should be null.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. response should not be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. error code should be -32602.",
            "success": true
          }
        ]
      }
    },
    "parity:master": {
      "ethereum/rpc-compat": {
        "start": "2018-09-06T15:41:33.632653677Z",
        "end": "2018-09-06T15:42:07.062417587Z",
        "success": false,
        "subresults": [
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block with two uncles. uncle count should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. response should be null.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber for block that doesn't exist. response should not be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockNumber no parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash without full transactions. transactions should be hashes.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with full transactions. transactions should be objects.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByHash with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber for block with one tx. transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"earliest\". transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\" rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber \"latest\". transaction count should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByNumber with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber without full transactions. transactions should be hashes.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with full transactions. transactions should be objects.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\") rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get genesis block (\"earliest\"). block number should be zero.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. response has blockHeader hash.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. headers should be equal.",
            "success": true
          },
          {
            "name": "eth_getBlockByNumber get latest block. block number should be 32.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0 rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "result": {
                  "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                  "gasLimit": "0x2fefd8",
                  "number": "0x2",
                  "size": null,
                  "author": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                  "mixHash": "0xe970d9815a634e25a778a765764d91ecc80d667a85721dcd4297d00be8d2af29",
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "miner": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                  "logsBloom": "0x
                  "nonce": "0x64050e6ee4c2f3c7",
                  "hash": "0x9fbaff6f69e4f47a09fb30a14baadf2435bd1ad1f1940e7e985de0b3acff4e0a",
                  "uncles": [],
                  "transactions": [],
                  "timestamp": "0x561bc2e7",
                  "sealFields": [
                    "0xa0e970d9815a634e25a778a765764d91ecc80d667a85721dcd4297d00be8d2af29",
                    "0x8864050e6ee4c2f3c7"
                  ],
                  "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                  "difficulty": "0x20040",
                  "parentHash": "0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9",
                  "extraData": "0x",
                  "stateRoot": "0xee57559895449b8dbd0a096b2999cf97b517b645ec8db33c7f5934778672263e",
                  "totalDifficulty": "0x60040",
                  "gasUsed": "0x0"
                },
                "id": 1
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'size']:\n    {u'description': u'QUANTITY - integer the size of this block in bytes.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'size']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "null",
                            "description": "Uncles don't have total difficulty."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. response has hash.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex uncle at index 0. hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockHashAndIndex with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0 rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {
                "jsonrpc": "2.0",
                "result": {
                  "transactionsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                  "gasLimit": "0x2fefd8",
                  "number": "0x2",
                  "size": null,
                  "author": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                  "mixHash": "0xe970d9815a634e25a778a765764d91ecc80d667a85721dcd4297d00be8d2af29",
                  "sha3Uncles": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
                  "miner": "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                  "logsBloom": "0x
                  "nonce": "0x64050e6ee4c2f3c7",
                  "hash": "0x9fbaff6f69e4f47a09fb30a14baadf2435bd1ad1f1940e7e985de0b3acff4e0a",
                  "uncles": [],
                  "transactions": [],
                  "timestamp": "0x561bc2e7",
                  "sealFields": [
                    "0xa0e970d9815a634e25a778a765764d91ecc80d667a85721dcd4297d00be8d2af29",
                    "0x8864050e6ee4c2f3c7"
                  ],
                  "receiptsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                  "difficulty": "0x20040",
                  "parentHash": "0x10aaf14a53caf27552325374429d3558398a36d3682ede6603c2c6511896e9f9",
                  "extraData": "0x",
                  "stateRoot": "0xee57559895449b8dbd0a096b2999cf97b517b645ec8db33c7f5934778672263e",
                  "totalDifficulty": "0x60040",
                  "gasUsed": "0x0"
                },
                "id": 1
              },
              "schemaException": "None is not of type u'string'\n\nFailed validating u'type' in schema[u'allOf'][1][u'properties'][u'result'][u'properties'][u'size']:\n    {u'description': u'QUANTITY - integer the size of this block in bytes.',\n     u'type': u'string'}\n\nOn instance[u'result'][u'size']:\n    None",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "object",
                        "properties": {
                          "nonce": {
                            "type": "string",
                            "description": "DATA, 8 Bytes - hash of the generated proof-of-work. null when its pending block."
                          },
                          "receiptsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the receipts trie of the block."
                          },
                          "hash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the block. null when its pending block."
                          },
                          "uncles": {
                            "items": {},
                            "type": "array",
                            "description": "Array - Array of uncle hashes."
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "QUANTITY - the unix timestamp for when the block was collated."
                          },
                          "sha3Uncles": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - SHA3 of the uncles data in the block."
                          },
                          "miner": {
                            "type": "string",
                            "description": "DATA, 20 Bytes - the address of the beneficiary to whom the mining rewards were given."
                          },
                          "parentHash": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - hash of the parent block."
                          },
                          "extraData": {
                            "type": "string",
                            "description": "DATA - the \"extra data\" field of this block."
                          },
                          "gasLimit": {
                            "type": "string",
                            "description": "QUANTITY - the maximum gas allowed in this block."
                          },
                          "number": {
                            "type": "string",
                            "description": "QUANTITY - the block number. null when its pending block."
                          },
                          "stateRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the final state trie of the block."
                          },
                          "difficulty": {
                            "type": "string",
                            "description": "QUANTITY - integer of the difficulty for this block."
                          },
                          "transactionsRoot": {
                            "type": "string",
                            "description": "DATA, 32 Bytes - the root of the transaction trie of the block."
                          },
                          "size": {
                            "type": "string",
                            "description": "QUANTITY - integer the size of this block in bytes."
                          },
                          "mixHash": {
                            "type": "string"
                          },
                          "totalDifficulty": {
                            "type": "null",
                            "description": "Uncles don't have total difficulty."
                          },
                          "gasUsed": {
                            "type": "string",
                            "description": "QUANTITY - the total used gas by all transactions in this block."
                          },
                          "logsBloom": {
                            "type": "string",
                            "description": "DATA, 256 Bytes - the bloom filter for the logs of the block. null when its pending block."
                          }
                        }
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. response has hash.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex uncle at index 0. hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleByBlockNumberAndIndex with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_sign message \"hello world\"",
            "success": false,
            "error": "ERROR. json-rpc request failed: HTTPConnectionPool(host='172.18.0.3', port=8545): Read timed out. (read timeout=10)",
            "details": {
              "rpc_request": {
                "params": [
                  "0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb",
                  "0x68656c6c6f20776f726c64"
                ],
                "method": "eth_sign"
              },
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "string",
                        "description": "DATA: Signature."
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_sign message \"hello world\". rpc received response schema valid",
            "success": false,
            "error": "ERROR. couldn't validate rpc received response against schema.",
            "details": {
              "received_response": {},
              "schemaException": "{} is not valid under any of the given schemas\n\nFailed validating u'oneOf' in schema[u'allOf'][0]:\n    {u'$schema': u'http://json-schema.org/draft-04/schema#',\n     u'definitions': {u'common': {u'not': {u'description': u'cannot have result and error at the same time',\n                                           u'required': [u'result',\n                                                         u'error']},\n                                  u'properties': {u'id': {u'note': [u'spec says a number which should not contain a fractional part',\n                                                                    u'We choose integer here, but this is unenforceable with some languages'],\n                                                          u'type': [u'string',\n                                                                    u'integer',\n                                                                    u'null']},\n                                                  u'jsonrpc': {u'enum': [u'2.0']}},\n                                  u'required': [u'id', u'jsonrpc'],\n                                  u'type': u'object'},\n                      u'error': {u'allOf': [{u'$ref': u'#/definitions/common'},\n                                            {u'properties': {u'error': {u'properties': {u'code': {u'note': [u'unenforceable in some languages'],\n                                                                                                  u'type': u'integer'},\n                                                                                        u'data': {u'description': u'optional, can be anything'},\n                                                                                        u'message': {u'type': u'string'}},\n                                                                        u'required': [u'code',\n                                                                                      u'message'],\n                                                                        u'type': u'object'}},\n                                             u'required': [u'error']}]},\n                      u'success': {u'allOf': [{u'$ref': u'#/definitions/common'},\n                                              {u'required': [u'result']}],\n                                   u'description': u'A success. The result member is then required and can be anything.'}},\n     u'description': u'A JSON RPC 2.0 response, source https://github.com/fge/sample-json-schemas',\n     u'oneOf': [{u'$ref': u'#/definitions/success'},\n                {u'$ref': u'#/definitions/error'},\n                {u'items': {u'oneOf': [{u'$ref': u'#/definitions/success'},\n                                       {u'$ref': u'#/definitions/error'}]},\n                 u'type': u'array'}]}\n\nOn instance:\n    {}",
              "response_schema": {
                "definitions": {
                  "response-obj": {
                    "id": "#response-obj",
                    "properties": {
                      "result": {
                        "type": "string",
                        "description": "DATA: Signature."
                      }
                    }
                  }
                },
                "id": "#response",
                "allOf": [
                  {
                    "$ref": "jsonrpc-response.json"
                  },
                  {
                    "$ref": "#/definitions/response-obj"
                  }
                ]
              }
            }
          },
          {
            "name": "eth_sign message \"hello world\". response is not empty.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result != null",
            "details": {
              "receivedResponse": {},
              "assertion_program": ".receivedResponse.result != null",
              "expectedResponse": {
                "result": "0xce909e8ea6851bc36c007a0072d0524b07a3ff8d4e623aca4c71ca8e57250c4d0a3fc38fa8fbaaa81ead4b9f6bd03356b6f8bf18bccad167d78891636e1d69561b"
              },
              "requestObject": {
                "params": [
                  "0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb",
                  "0x68656c6c6f20776f726c64"
                ],
                "method": "eth_sign"
              }
            }
          },
          {
            "name": "eth_sign message \"hello world\". signed message should be length 132.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result | length == 132",
            "details": {
              "receivedResponse": {},
              "assertion_program": ".receivedResponse.result | length == 132",
              "expectedResponse": {
                "result": "0xce909e8ea6851bc36c007a0072d0524b07a3ff8d4e623aca4c71ca8e57250c4d0a3fc38fa8fbaaa81ead4b9f6bd03356b6f8bf18bccad167d78891636e1d69561b"
              },
              "requestObject": {
                "params": [
                  "0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb",
                  "0x68656c6c6f20776f726c64"
                ],
                "method": "eth_sign"
              }
            }
          },
          {
            "name": "eth_sign message \"hello world\". signatures should be equal.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result == .expectedResponse.result",
            "details": {
              "receivedResponse": {},
              "assertion_program": ".receivedResponse.result == .expectedResponse.result",
              "expectedResponse": {
                "result": "0xce909e8ea6851bc36c007a0072d0524b07a3ff8d4e623aca4c71ca8e57250c4d0a3fc38fa8fbaaa81ead4b9f6bd03356b6f8bf18bccad167d78891636e1d69561b"
              },
              "requestObject": {
                "params": [
                  "0xbe93f9bacbcffc8ee6663f2647917ed7a20a57bb",
                  "0x68656c6c6f20776f726c64"
                ],
                "method": "eth_sign"
              }
            }
          },
          {
            "name": "eth_sign with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_sign with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_sign with one parameter. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. response has tx hash.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. tx hashes should be equal.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash get tx hash. blockNumber should be 2.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash with no parameters. error code should be -32602.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getTransactionByHash nonexistent tx. response should be null.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getBlockTransactionCountByHash for block with one tx. transaction count should be equal.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt experimental method. response is not empty.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result != null",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "Method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result != null",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt experimental method. key 0x00 should be first result in the array.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result.storage[0].key == .expectedResponse.result.storage[0].key",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "Method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result.storage[0].key == .expectedResponse.result.storage[0].key",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt experimental method. storage values at 0x00 should be equal.",
            "success": false,
            "error": "assertion failed: .receivedResponse.result.storage[0].value == .expectedResponse.result.storage[0].value",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "Method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.result.storage[0].value == .expectedResponse.result.storage[0].value",
              "expectedResponse": {
                "result": {
                  "storage": [
                    {
                      "hashedKey": "0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "value": "0x000000000000000000000000000000000000000000000000000000008308fa01"
                    },
                    {
                      "hashedKey": "0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000002",
                      "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000003",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    },
                    {
                      "hashedKey": "0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b",
                      "key": "0x0000000000000000000000000000000000000000000000000000000000000004",
                      "value": "0xaabbccffffffffffffffffffffffffffffffffffffffffffffffffffffffffee"
                    }
                  ],
                  "complete": true
                }
              },
              "requestObject": {
                "params": [
                  "0x71d59849ddd98543bdfbe8548f5eed559b07b8aaf196369f39134500eab68e53",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should be an error.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should have error code -32000.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.code == .expectedResponse.error.code",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "Method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.error.code == .expectedResponse.error.code",
              "expectedResponse": {
                "error": {
                  "message": "block 878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c not found",
                  "code": -32000
                }
              },
              "requestObject": {
                "params": [
                  "0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt for block that doesn't exist. response should have error message block not found.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.message == .expectedResponse.error.message",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "Method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.error.message == .expectedResponse.error.message",
              "expectedResponse": {
                "error": {
                  "message": "block 878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c not found",
                  "code": -32000
                }
              },
              "requestObject": {
                "params": [
                  "0x878a132155f53adb7c993ded4cfb687977397d63d873fcdbeb06c18cac907a5c",
                  0,
                  "0x6295ee1b4f6dd65047762f924ecd367c17eabf8f",
                  "0x",
                  "0x2b",
                  8
                ],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "debug_storageRangeAt no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "debug_storageRangeAt no parameter. error code should be -32602.",
            "success": false,
            "error": "assertion failed: .receivedResponse.error.code == .expectedResponse.error.code",
            "details": {
              "receivedResponse": {
                "jsonrpc": "2.0",
                "id": 1,
                "error": {
                  "message": "Method not found",
                  "code": -32601
                }
              },
              "assertion_program": ".receivedResponse.error.code == .expectedResponse.error.code",
              "expectedResponse": {
                "error": {
                  "message": "missing value for required argument 0",
                  "code": -32602
                }
              },
              "requestObject": {
                "shouldFailSchema": true,
                "params": [],
                "method": "debug_storageRangeAt"
              }
            }
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. response is not empty.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block with two uncles. uncle count should be equal.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. response should be null.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash for block that doesn't exist. response should not be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter rpc request got response.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. rpc received response schema valid",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. response should be an error.",
            "success": true
          },
          {
            "name": "eth_getUncleCountByBlockHash no parameter. error code should be -32602.",
            "success": true
          }
        ]
      }
    }
  }
}
